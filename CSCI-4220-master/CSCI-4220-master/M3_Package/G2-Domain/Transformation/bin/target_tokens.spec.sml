(*#line 31.10 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*)functor Target_LexFn(val getNextTokenPos : string -> {line: word, column: word})(*#line 1.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*)(* ============================================================================================== *) 
datatype lexresult	= SHELL of string * string * {line: word, column: word};
val error 			= fn x => TextIO.output(TextIO.stdOut,x ^ "\n")
val eof 			= fn () => SHELL("","eof",getNextTokenPos(""))
(* ============================================================================================== *)
(* ------------------------------------------------------------------ *)
(* assumes that ">" does not occur as part of a nonterminal symbol *)
fun generateSchemaTokenName( yytext ) =
    let
		fun split(x, []   ) =  raise General.Fail("an_error")
		  | split(x, y::ys) = if x=y then ys else split(x,ys);
													
		fun splitFirst(symbol,[])    = 	[] (* symbol was not in the input list *)
		  | splitFirst(symbol,x::xs) = 	if x = symbol 
						then (* found split point *)
							[]
						else (* keep looking      *)
							x::splitFirst(symbol,xs);
																		
        val s0   = explode(yytext);
        val s1   = split(#"<",s0);
        val s2   = splitFirst(#">",s1);  
    in
        implode(explode("!#schema_variable_") @ s2)        
    end;
	
(* ------------------------------------------------------------------ *)

(* ============================================================================================== *)
(*#line 35.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\003\003\003\003\003\003\003\003\003\074\075\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\074\073\003\003\003\072\070\003\069\068\067\065\003\063\003\061\
\\060\058\058\058\058\058\058\058\058\058\003\057\051\049\047\003\
\\003\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\044\003\003\043\003\
\\003\008\039\008\008\035\028\008\008\024\008\008\008\008\008\008\
\\019\008\008\008\015\008\008\010\008\008\008\007\005\004\003\003\
\\003"
),
 (5, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
\\000"
),
 (8, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\011\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\012\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\013\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\014\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\016\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\017\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\018\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\020\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\021\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\022\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\023\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\027\009\009\009\009\009\009\009\025\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\026\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\031\009\009\009\009\009\009\009\009\009\009\009\009\009\029\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\030\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\032\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\033\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\034\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\036\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\037\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\038\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (39, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\040\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\041\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\042\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\045\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (45, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\050\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (51, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\056\000\000\
\\000\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\
\\052\052\052\052\052\052\052\052\052\052\052\000\000\000\000\000\
\\000\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\
\\052\052\052\052\052\052\052\052\052\052\052\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\052\052\052\052\052\052\052\052\052\052\000\000\000\000\053\000\
\\000\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\
\\052\052\052\052\052\052\052\052\052\052\052\000\000\000\000\052\
\\000\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\
\\052\052\052\052\052\052\052\052\052\052\052\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\055\055\055\055\055\055\055\055\055\055\000\000\000\000\000\000\
\\000\055\055\055\055\055\055\055\055\055\055\055\055\055\055\055\
\\055\055\055\055\055\055\055\055\055\055\055\000\000\000\000\055\
\\000\055\055\055\055\055\055\055\055\055\055\055\055\055\055\055\
\\055\055\055\055\055\055\055\055\055\055\055\000\000\000\000\000\
\\000"
),
 (58, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\059\059\059\059\059\059\059\059\059\059\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (62, 
"\062\062\062\062\062\062\062\062\062\062\000\062\062\062\062\062\
\\062\062\062\062\062\062\062\062\062\062\062\062\062\062\062\062\
\\062\062\062\062\062\062\062\062\062\062\062\062\062\062\062\062\
\\062\062\062\062\062\062\062\062\062\062\062\062\062\062\062\062\
\\062\062\062\062\062\062\062\062\062\062\062\062\062\062\062\062\
\\062\062\062\062\062\062\062\062\062\062\062\062\062\062\062\062\
\\062\062\062\062\062\062\062\062\062\062\062\062\062\062\062\062\
\\062\062\062\062\062\062\062\062\062\062\062\062\062\062\062\062\
\\062"
),
 (63, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (65, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\066\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (70, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\071\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (74, 
"\000\000\000\000\000\000\000\000\000\075\075\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\075\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 124)], trans = 0},
{fin = [(N 87),(N 124)], trans = 0},
{fin = [(N 77),(N 124)], trans = 5},
{fin = [(N 42)], trans = 0},
{fin = [(N 85),(N 124)], trans = 0},
{fin = [(N 110),(N 124)], trans = 8},
{fin = [(N 110)], trans = 8},
{fin = [(N 110),(N 124)], trans = 10},
{fin = [(N 110)], trans = 11},
{fin = [(N 110)], trans = 12},
{fin = [(N 110)], trans = 13},
{fin = [(N 73),(N 110)], trans = 8},
{fin = [(N 110),(N 124)], trans = 15},
{fin = [(N 110)], trans = 16},
{fin = [(N 110)], trans = 17},
{fin = [(N 92),(N 110)], trans = 8},
{fin = [(N 110),(N 124)], trans = 19},
{fin = [(N 110)], trans = 20},
{fin = [(N 110)], trans = 21},
{fin = [(N 110)], trans = 22},
{fin = [(N 67),(N 110)], trans = 8},
{fin = [(N 110),(N 124)], trans = 24},
{fin = [(N 110)], trans = 25},
{fin = [(N 61),(N 110)], trans = 8},
{fin = [(N 57),(N 110)], trans = 8},
{fin = [(N 110),(N 124)], trans = 28},
{fin = [(N 110)], trans = 29},
{fin = [(N 54),(N 110)], trans = 8},
{fin = [(N 110)], trans = 31},
{fin = [(N 110)], trans = 32},
{fin = [(N 110)], trans = 33},
{fin = [(N 98),(N 110)], trans = 8},
{fin = [(N 110),(N 124)], trans = 35},
{fin = [(N 110)], trans = 36},
{fin = [(N 110)], trans = 37},
{fin = [(N 50),(N 110)], trans = 8},
{fin = [(N 110),(N 124)], trans = 39},
{fin = [(N 110)], trans = 40},
{fin = [(N 110)], trans = 41},
{fin = [(N 103),(N 110)], trans = 8},
{fin = [(N 75),(N 124)], trans = 0},
{fin = [(N 124)], trans = 44},
{fin = [], trans = 45},
{fin = [(N 122)], trans = 0},
{fin = [(N 36),(N 124)], trans = 47},
{fin = [(N 39)], trans = 0},
{fin = [(N 31),(N 124)], trans = 49},
{fin = [(N 34)], trans = 0},
{fin = [(N 26),(N 124)], trans = 51},
{fin = [], trans = 52},
{fin = [], trans = 53},
{fin = [], trans = 54},
{fin = [(N 118)], trans = 54},
{fin = [(N 29)], trans = 0},
{fin = [(N 79),(N 124)], trans = 0},
{fin = [(N 107),(N 124)], trans = 58},
{fin = [(N 107)], trans = 58},
{fin = [(N 107),(N 124)], trans = 0},
{fin = [(N 17),(N 124)], trans = 61},
{fin = [(N 6)], trans = 62},
{fin = [(N 8),(N 124)], trans = 63},
{fin = [(N 11)], trans = 0},
{fin = [(N 21),(N 124)], trans = 65},
{fin = [(N 24)], trans = 0},
{fin = [(N 15),(N 124)], trans = 0},
{fin = [(N 83),(N 124)], trans = 0},
{fin = [(N 81),(N 124)], trans = 0},
{fin = [(N 124)], trans = 70},
{fin = [(N 45)], trans = 0},
{fin = [(N 19),(N 124)], trans = 0},
{fin = [(N 13),(N 124)], trans = 0},
{fin = [(N 2),(N 124)], trans = 74},
{fin = [(N 2)], trans = 74}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  103 => let val yytext=yymktext() in (*#line 83.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 645.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 107 => let val yytext=yymktext() in (*#line 85.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( "integer", yytext, getNextTokenPos( yytext ))(*#line 647.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 11 => let val yytext=yymktext() in (*#line 53.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 649.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 110 => let val yytext=yymktext() in (*#line 86.21 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( "identifier", yytext, getNextTokenPos( yytext ))(*#line 651.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 118 => let val yytext=yymktext() in (*#line 88.35 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL(generateSchemaTokenName(yytext), yytext, getNextTokenPos(yytext))    (*#line 653.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 122 => let val yytext=yymktext() in (*#line 89.35 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL("" , yytext, getNextTokenPos(yytext))    (*#line 655.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 124 => let val yytext=yymktext() in (*#line 91.35 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) error("ignored an unprintable character: " ^ yytext); getNextTokenPos(yytext); lex()  (*#line 657.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 13 => let val yytext=yymktext() in (*#line 54.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 659.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 15 => let val yytext=yymktext() in (*#line 55.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 661.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 17 => let val yytext=yymktext() in (*#line 56.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 663.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 19 => let val yytext=yymktext() in (*#line 57.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 665.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 2 => let val yytext=yymktext() in (*#line 49.18 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) getNextTokenPos(yytext); lex()  (*#line 667.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 21 => let val yytext=yymktext() in (*#line 58.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 669.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 24 => let val yytext=yymktext() in (*#line 59.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 671.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 26 => let val yytext=yymktext() in (*#line 60.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 673.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 29 => let val yytext=yymktext() in (*#line 61.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 675.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 31 => let val yytext=yymktext() in (*#line 62.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 677.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 34 => let val yytext=yymktext() in (*#line 63.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 679.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 36 => let val yytext=yymktext() in (*#line 64.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 681.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 39 => let val yytext=yymktext() in (*#line 65.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 683.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 42 => let val yytext=yymktext() in (*#line 66.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 685.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 45 => let val yytext=yymktext() in (*#line 67.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 687.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 50 => let val yytext=yymktext() in (*#line 68.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 689.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 54 => let val yytext=yymktext() in (*#line 69.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 691.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 57 => let val yytext=yymktext() in (*#line 70.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 693.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 6 => let val yytext=yymktext() in (*#line 50.18 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) getNextTokenPos(yytext); lex()  (*#line 695.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 61 => let val yytext=yymktext() in (*#line 71.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 697.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 67 => let val yytext=yymktext() in (*#line 72.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 699.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 73 => let val yytext=yymktext() in (*#line 73.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 701.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 75 => let val yytext=yymktext() in (*#line 74.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 703.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 77 => let val yytext=yymktext() in (*#line 75.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 705.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 79 => let val yytext=yymktext() in (*#line 76.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 707.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 8 => let val yytext=yymktext() in (*#line 52.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 709.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 81 => let val yytext=yymktext() in (*#line 77.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 711.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 83 => let val yytext=yymktext() in (*#line 78.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 713.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 85 => let val yytext=yymktext() in (*#line 79.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 715.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 87 => let val yytext=yymktext() in (*#line 80.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 717.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 92 => let val yytext=yymktext() in (*#line 81.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 719.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| 98 => let val yytext=yymktext() in (*#line 82.17 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 721.1 "C:\src\CSCI-4220\M3_Package\G2-Domain\Transformation\bin\target_tokens.spec.sml"*)
 end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
